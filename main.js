const { app, BrowserWindow, ipcMain, Menu, Tray, dialog } = require('electron');
const path = require('path');
const url = require('url');
const Store = require('electron-store');
const express = require('express');
const fetch = require('node-fetch');
require('dotenv').config();
const tmi = require('tmi.js');
const fs = require('fs');

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app.name = 'YaMusicBot by @pnsrc';
app.setName('YaMusicBot by @pnsrc');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
const store = new Store();

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–∫–æ–Ω –∏ —Ç—Ä–µ—è
let mainWindow;
let settingsWindow;
let tray = null;
let isQuitting = false;

// URL API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
let apiUrl = store.get('apiUrl') || 'https://your-api-endpoint.com/track-info';
// –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ
let currentTrackInfo = {};



// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è Twitch-–±–æ—Ç–∞ —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
let twitchSettings = {
  twitchChannel: store.get('twitchChannel') || 'SeRRRg0',
  twitchUsername: store.get('twitchUsername') || 'yamusicbot',
  twitchToken: store.get('twitchToken') || 'oauth:7hxajb9m1ta8fd65wri3hpu33hkw55',
  autoAnnounce: store.get('autoAnnounce') !== undefined ? store.get('autoAnnounce') : true
};

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –±—ã–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ä–∞–Ω–µ–µ
if (!store.get('twitchChannel')) store.set('twitchChannel', twitchSettings.twitchChannel);
if (!store.get('twitchUsername')) store.set('twitchUsername', twitchSettings.twitchUsername);
if (!store.get('twitchToken')) store.set('twitchToken', twitchSettings.twitchToken);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Twitch-–±–æ—Ç–∞
let client = new tmi.Client({
    options: { debug: false }, // –û—Ç–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    connection: {
        reconnect: true,
        secure: true
    },
    identity: {
        username: twitchSettings.twitchUsername,
        password: twitchSettings.twitchToken
    },
    channels: [twitchSettings.twitchChannel]
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Twitch-–±–æ—Ç–∞
function startTwitchBot() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if (!twitchSettings.twitchUsername || !twitchSettings.twitchToken || !twitchSettings.twitchChannel) {
            console.error('Error: Twitch bot environment variables not set');
            return;
        }
        
        console.log(`Connecting to Twitch as ${twitchSettings.twitchUsername} in channel ${twitchSettings.twitchChannel}`);

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Twitch
        client.connect()
            .then(() => {
                console.log('Twitch connection successful');
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –±—Ä–µ–Ω–¥–∞
                setTimeout(() => {
                    client.say(twitchSettings.twitchChannel, '–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Å–ª–µ–¥–∏—Ç—å –∑–∞ –º—É–∑—ã–∫–æ–π –≤ —ç—Ñ–∏—Ä–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ !track –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "—á—Ç–æ –∏–≥—Ä–∞–µ—Ç", —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫. YaMusicBot by @pnsrc üéµ');
                }, 2000);
            })
            .catch(err => console.error('Twitch connection error:', err));
        
        // –ú–∞—Å—Å–∏–≤ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ä—É—Å—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        const trackKeywords = ['–∫–∞–∫–æ–π —Ç—Ä–µ–∫', '—á—Ç–æ –∏–≥—Ä–∞–µ—Ç', '—á—Ç–æ –∑–∞ —Ç—Ä–µ–∫', '—á—Ç–æ –∑–∞ –º—É–∑—ã–∫–∞', '!track', '!—Ç—Ä–µ–∫'];
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        client.on('message', (channel, tags, message, self) => {
            if (self) return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            
            const lowerMsg = message.toLowerCase();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            const hasTrackKeyword = trackKeywords.some(keyword => lowerMsg.includes(keyword));
            
            if (hasTrackKeyword) {
                console.log(`Track request from ${tags.username}`);

                // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–∫–µ –∏–∑ API
                fetch(`http://localhost:${PORT}/api/currenttrack`)
                    .then(response => response.json())
                    .then(data => {
                        if (data && data.track && data.artist) {
                            const response = `@${tags.username}, —Å–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: ${data.artist} - ${data.track} üéµ`;
                            client.say(channel, response);
                        } else {
                            client.say(channel, `@${tags.username}, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–∫–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ üòî`);
                        }
                    })
                    .catch(err => {
                        console.error('Error fetching track data:', err);
                        client.say(channel, `@${tags.username}, –æ—à–∏–±–∫–∞ üòî`);
                    });
            }
        });
    } catch (error) {
        console.error('Error launching Twitch bot:', error);
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Express —Å–µ—Ä–≤–µ—Ä–∞
const server = express();
const PORT = 9898;

// Middleware –¥–ª—è CORS –∏ JSON
server.use(express.json());
server.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');
  next();
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ
server.get('/api/currenttrack', (req, res) => {
  res.json(currentTrackInfo);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
function startServer() {
  httpServer = server.listen(PORT, () => {
    console.log(`Server started on http://localhost:${PORT}`);
  });
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—É—Ç–µ–π –∫ –∏–∫–æ–Ω–∫–∞–º –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –û–°
const getIconPath = () => {
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è icons
  const iconsDir = path.join(__dirname, 'icons');
  
  // –ï—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—ë–º –µ—ë
  if (!fs.existsSync(iconsDir)) {
    try {
      fs.mkdirSync(iconsDir, { recursive: true });
      console.log(`Created icons directory at ${iconsDir}`);
    } catch (err) {
      console.error(`Error creating icons directory: ${err.message}`);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
      return null;
    }
  }
  
  // –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∫–æ–Ω–æ–∫
  if (process.platform === 'win32') {
    const icoPath = path.join(iconsDir, 'icon.ico');
    if (fs.existsSync(icoPath)) {
      return icoPath;
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ PNG –∏–∫–æ–Ω–∫–∏
  const pngPath = path.join(iconsDir, 'icon.png');
  if (fs.existsSync(pngPath)) {
    return pngPath;
  }
  
  // –ï—Å–ª–∏ –∏–∫–æ–Ω–∫–∏ –Ω–µ—Ç, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
  console.warn(`Warning: No icon files found in ${iconsDir}`);
  return null;
};

// –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∏–∫–æ–Ω–∫–µ
const iconPath = getIconPath();

// –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∏–∫–æ–Ω–∫–∏, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
function createMainWindow() {
  const windowOptions = {
    width: 1000,
    height: 800,
    title: 'YaMusicBot by @pnsrc',
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      preload: path.join(__dirname, 'preload.js')
    },
    backgroundColor: '#ffffff'
  };
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (iconPath) {
    windowOptions.icon = iconPath;
  }
  
  mainWindow = new BrowserWindow(windowOptions);

  mainWindow.setTitle('YaMusicBot by @pnsrc');
  mainWindow.loadURL('https://music.yandex.ru');

  mainWindow.on('close', (event) => {
    if (!isQuitting) {
      event.preventDefault();
      mainWindow.hide();
      return false;
    }
  });

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ
  mainWindow.webContents.on('did-finish-load', () => {
    mainWindow.webContents.executeJavaScript(`
      function getCurrentTrackInfo() {
        try {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥ —Å–Ω–∞—á–∞–ª–∞
          const trackElement = document.querySelector('.track__name');
          const artistElement = document.querySelector('.track__artists');
          
          if (trackElement && artistElement) {
            const trackName = trackElement.textContent.trim();
            const artistName = artistElement.textContent.trim();
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –∞—Ä—Ç–∏—Å—Ç–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞
            const cleanTrackName = trackName.replace(artistName, '').trim();
            const finalTrackName = cleanTrackName || trackName; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª, –µ—Å–ª–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å
            
            // –ü–æ–ª—É—á–∞–µ–º URL –æ–±–ª–æ–∂–∫–∏
            let coverUrl = "";
            const coverElement = document.querySelector('.track-cover');
            if (coverElement) {
              const bgImg = window.getComputedStyle(coverElement).backgroundImage;
              if (bgImg && bgImg !== "none") {
                coverUrl = bgImg.slice(4, -1).replace(/"/g, "");
              }
            }
            
            return {
              track: finalTrackName,
              artist: artistName,
              cover: coverUrl,
              url: window.location.href,
              timestamp: new Date().toISOString()
            };
          }
          
          // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π
          const title = document.title;
          const match = title.match(/(.*?)\\s*[-‚Äì‚Äî]\\s*(.*)\\s*[-‚Äì‚Äî]\\s*–Ø–Ω–¥–µ–∫—Å\\.–ú—É–∑—ã–∫–∞/i);
          if (match && match.length > 2) {
            return {
              artist: match[1].trim(),
              track: match[2].trim(),
              url: window.location.href,
              timestamp: new Date().toISOString()
            };
          }
          
          return { error: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ" };
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ:", error);
          return { error: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ" };
        }
      }

      function setupTrackChangeObserver() {
        const targetNode = document.querySelector('.player-controls');
        
        if (!targetNode) {
          console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –ø–ª–µ–µ—Ä–∞");
          return;
        }
      
        const config = { attributes: true, childList: true, subtree: true };
        
        const callback = function(mutationsList, observer) {
          for (const mutation of mutationsList) {
            if (mutation.type === 'childList' || mutation.type === 'attributes') {
              const trackInfo = getCurrentTrackInfo();
              window.electronAPI.sendTrackInfo(trackInfo);
            }
          }
        };
        
        const observer = new MutationObserver(callback);
        observer.observe(targetNode, config);
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
        const initialTrackInfo = getCurrentTrackInfo();
        window.electronAPI.sendTrackInfo(initialTrackInfo);
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
      if (document.readyState === 'complete') {
        setupTrackChangeObserver();
      } else {
        window.addEventListener('load', setupTrackChangeObserver);
      }
    `);
  });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –≤ —Ç—Ä–µ–µ
function createTray() {
  try {
    // –ï—Å–ª–∏ –∏–∫–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç—É—é –∏–∫–æ–Ω–∫—É (1x1 –ø–∏–∫—Å–µ–ª—å)
    if (!iconPath) {
      console.warn("No icon found, creating a basic tray icon");
      // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –∏–∫–æ–Ω–∫–∏
      const emptyIconPath = path.join(__dirname, 'empty-icon.png');
      if (!fs.existsSync(emptyIconPath)) {
        // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π 1x1 –ø–∏–∫—Å–µ–ª—å PNG —Ñ–∞–π–ª (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–±–æ—á–∏–π PNG)
        const emptyPngBuffer = Buffer.from('iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8z8BQDwAEhQGAhKmMIQAAAABJRU5ErkJggg==', 'base64');
        fs.writeFileSync(emptyIconPath, emptyPngBuffer);
      }
      tray = new Tray(emptyIconPath);
    } else {
      tray = new Tray(iconPath);
    }
    
    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –º–µ–Ω—é —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ Twitch –∏ –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π —Å—Ç–∞—Ç—É—Å–∞
    const contextMenu = Menu.buildFromTemplate([
      { 
        label: 'YaMusicBot by @pnsrc',
        enabled: false,
        icon: iconPath // –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–≥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —ç—Ç—É –∏–∫–æ–Ω–∫—É
      },
      { type: 'separator' },
      { 
        label: '–ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–µ–µ—Ä', 
        click: () => mainWindow.show()
      },
      { 
        label: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', 
        click: () => createSettingsWindow(),
        submenu: [
          { 
            label: `Twitch: ${twitchSettings.twitchChannel}`,
            click: () => createSettingsWindow()
          },
          {
            label: `–ê–≤—Ç–æ–æ–ø–æ–≤–µ—â–µ–Ω–∏—è: ${twitchSettings.autoAnnounce ? '–í–∫–ª' : '–í—ã–∫–ª'}`,
            click: () => {
              twitchSettings.autoAnnounce = !twitchSettings.autoAnnounce;
              store.set('autoAnnounce', twitchSettings.autoAnnounce);
              createTray(); // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
            }
          }
        ]
      },
      { type: 'separator' },
      {
        label: `Twitch —Å—Ç–∞—Ç—É—Å: ${client && client.readyState() === 'OPEN' ? 'üü¢ –û–Ω–ª–∞–π–Ω' : 'üî¥ –û—Ñ–ª–∞–π–Ω'}`,
        click: () => {
          if (client && client.readyState() !== 'OPEN') {
            dialog.showMessageBox(mainWindow, {
              type: 'info',
              title: '–°—Ç–∞—Ç—É—Å Twitch',
              message: '–ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –•–æ—Ç–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è?',
              buttons: ['–î–∞', '–ù–µ—Ç'],
              defaultId: 0
            }).then(result => {
              if (result.response === 0) {
                updateTwitchClient();
                startTwitchBot();
              }
            });
          }
        }
      },
      { type: 'separator' },
      { 
        label: '–í—ã—Ö–æ–¥', 
        click: () => {
          isQuitting = true;
          app.quit();
        } 
      }
    ]);
    
    tray.setToolTip('YaMusicBot by @pnsrc');
    tray.setContextMenu(contextMenu);
  
    tray.on('click', () => {
      mainWindow.isVisible() ? mainWindow.hide() : mainWindow.show();
    });
  } catch (error) {
    console.error('Error creating tray icon:', error);
    
    // –ê–≤–∞—Ä–∏–π–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è Windows
    if (process.platform === 'win32') {
      try {
        // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–π –±–µ–∑ –∏–∫–æ–Ω–∫–∏ (–≤ Windows —ç—Ç–æ –∏–Ω–æ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç)
        tray = new Tray(path.join(__dirname, 'icons', 'icon.png'));
        const contextMenu = Menu.buildFromTemplate([
          { label: 'Show', click: () => mainWindow.show() },
          { label: 'Settings', click: () => createSettingsWindow() },
          { type: 'separator' },
          { label: 'Exit', click: () => { isQuitting = true; app.quit(); } }
        ]);
        tray.setContextMenu(contextMenu);
      } catch (err) {
        console.error('Failed to create tray even with fallback:', err);
      }
    } else {
      // –ê–≤–∞—Ä–∏–π–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ—è
      console.error('Could not create tray icon, continuing without it');
    }
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å —Ç–æ–π –∂–µ –∏–∫–æ–Ω–∫–æ–π
function createSettingsWindow() {
  if (settingsWindow) {
    settingsWindow.focus();
    return;
  }

  settingsWindow = new BrowserWindow({
    width: 550,
    height: 550,
    parent: mainWindow,
    modal: true,
    show: false,
    title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ YaMusicBot',
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      preload: path.join(__dirname, 'preload.js')
    },
    icon: iconPath // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏ –¥–ª—è —ç—Ç–æ–≥–æ –æ–∫–Ω–∞
  });

  settingsWindow.loadURL(url.format({
    pathname: path.join(__dirname, 'settings.html'),
    protocol: 'file:',
    slashes: true
  }));

  settingsWindow.once('ready-to-show', () => {
    settingsWindow.show();
  });

  settingsWindow.on('closed', () => {
    settingsWindow = null;
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–∂–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –¥–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ
let lastTrackInfo = {}; // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ç—Ä–µ–∫–∞

// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π track-info —á—Ç–æ–±—ã —É—á–∏—Ç—ã–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É autoAnnounce
ipcMain.on('track-info', (event, trackInfo) => {
  console.log('Track info received:', trackInfo);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ
  currentTrackInfo = trackInfo;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ç—Ä–µ–∫ –∏ —Å—Ç–æ–∏—Ç –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  if (twitchSettings.autoAnnounce && 
      trackInfo && trackInfo.track && trackInfo.artist && 
      (lastTrackInfo.track !== trackInfo.track || lastTrackInfo.artist !== trackInfo.artist)) {
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Ç—Ä–µ–∫–µ –≤ —á–∞—Ç Twitch —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –∞–≤—Ç–æ–∞–Ω–æ–Ω—Å
    if (client && client.readyState() === 'OPEN') {
      const message = `–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: ${trackInfo.artist} - ${trackInfo.track} üéµ`;
      client.say(twitchSettings.twitchChannel, message)
        .then(() => console.log('New track notification sent'))
        .catch(err => console.error('Error sending track notification:', err));
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ç—Ä–µ–∫–µ
    lastTrackInfo = {
      track: trackInfo.track,
      artist: trackInfo.artist
    };
  }
});

// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é ipcMain.handle('get-settings')
ipcMain.handle('get-settings', async () => {
  return {
    apiUrl: apiUrl,
    twitchChannel: twitchSettings.twitchChannel || '',
    twitchUsername: twitchSettings.twitchUsername || '',
    twitchToken: twitchSettings.twitchToken || '',
    autoAnnounce: twitchSettings.autoAnnounce,
    twitchConnected: client && client.readyState() === 'OPEN'
  };
});

// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é ipcMain.on('save-settings')
ipcMain.on('save-settings', (event, settings) => {
  console.log('Saving settings:', settings);
  
  if (settings.apiUrl !== undefined) {
    apiUrl = settings.apiUrl;
    store.set('apiUrl', apiUrl);
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Twitch
  if (settings.twitchChannel !== undefined) {
    twitchSettings.twitchChannel = settings.twitchChannel;
    store.set('twitchChannel', settings.twitchChannel);
  }
  
  if (settings.twitchUsername !== undefined) {
    twitchSettings.twitchUsername = settings.twitchUsername;
    store.set('twitchUsername', settings.twitchUsername);
  }
  
  if (settings.twitchToken !== undefined) {
    twitchSettings.twitchToken = settings.twitchToken;
    store.set('twitchToken', settings.twitchToken);
  }
  
  if (settings.autoAnnounce !== undefined) {
    twitchSettings.autoAnnounce = settings.autoAnnounce;
    store.set('autoAnnounce', settings.autoAnnounce);
  }
  
  // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º Twitch-–±–æ—Ç–∞ —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
  if (client) {
    client.disconnect().then(() => {
      updateTwitchClient();
      startTwitchBot();
      updateTrayMenu(); // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Ç—Ä–µ—è
    });
  }
  
  if (settingsWindow) {
    settingsWindow.close();
  }
});

// –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Twitch
ipcMain.handle('test-twitch-connection', async (event, settings) => {
  try {
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const testClient = new tmi.Client({
      options: { debug: false },
      connection: {
        reconnect: false,
        secure: true
      },
      identity: {
        username: settings.twitchUsername,
        password: settings.twitchToken
      },
      channels: [settings.twitchChannel]
    });
    
    // –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
    await testClient.connect();
    // –ï—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è
    await testClient.disconnect();
    
    return { success: true };
  } catch (error) {
    console.error('Test connection failed:', error);
    return { 
      success: false, 
      error: error.message || 'Unknown error' 
    };
  }
});

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Twitch —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
function updateTwitchClient() {
  client = new tmi.Client({
    options: { debug: false },
    connection: {
      reconnect: true,
      secure: true
    },
    identity: {
      username: twitchSettings.twitchUsername,
      password: twitchSettings.twitchToken
    },
    channels: [twitchSettings.twitchChannel]
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ API
async function sendTrackInfoToAPI(trackData) {
  try {
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(trackData)
    });
    
    if (!response.ok) {
      throw new Error(`HTTP error: ${response.status}`);
    }
    
    const responseData = await response.json();
    console.log("API response:", responseData);
    
  } catch (error) {
    console.error("Error sending data to API:", error);
  }
}

// –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é —Ç—Ä–µ—è
function updateTrayMenu() {
  if (!tray) return;
  
  const contextMenu = Menu.buildFromTemplate([
    { 
      label: 'YaMusicBot by @pnsrc',
      enabled: false
    },
    { type: 'separator' },
    { 
      label: '–ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–µ–µ—Ä', 
      click: () => mainWindow.show()
    },
    { 
      label: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', 
      click: () => createSettingsWindow()
    },
    { type: 'separator' },
    {
      label: `Twitch: ${twitchSettings.twitchChannel}`,
      click: () => createSettingsWindow()
    },
    {
      label: `–ê–≤—Ç–æ–æ–ø–æ–≤–µ—â–µ–Ω–∏—è: ${twitchSettings.autoAnnounce ? '–í–∫–ª' : '–í—ã–∫–ª'}`,
      click: () => {
        twitchSettings.autoAnnounce = !twitchSettings.autoAnnounce;
        store.set('autoAnnounce', twitchSettings.autoAnnounce);
        updateTrayMenu();
      }
    },
    { type: 'separator' },
    {
      label: `Twitch —Å—Ç–∞—Ç—É—Å: ${client && client.readyState() === 'OPEN' ? 'üü¢ –û–Ω–ª–∞–π–Ω' : 'üî¥ –û—Ñ–ª–∞–π–Ω'}`,
      click: () => {
        if (client && client.readyState() !== 'OPEN') {
          updateTwitchClient();
          startTwitchBot();
        }
      }
    },
    { type: 'separator' },
    { 
      label: '–í—ã—Ö–æ–¥', 
      click: () => {
        isQuitting = true;
        app.quit();
      } 
    }
  ]);
  
  tray.setContextMenu(contextMenu);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app.whenReady().then(() => {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–∫–æ–Ω–∫–∏ –¥–ª—è macOS
  if (process.platform === 'darwin') {
    app.dock.setIcon(iconPath);
  }
  
  startServer();
  setTimeout(() => {
    startTwitchBot();
  }, 1000);
  createMainWindow();
  createTray();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
app.on('before-quit', () => {
  isQuitting = true;
  if (client) {
    client.disconnect();
  }
});